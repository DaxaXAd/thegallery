import './bootstrap.js';
// import 'bootstrap/dist/js/bootstrap.bundle.min';

/*
 * Welcome to your app's main JavaScript file!
 *
 * This file will be included onto the page via the importmap() Twig function,
 * which should already be in your base.html.twig.
 */
import './styles/app.css';

console.log('This log comes from assets/app.js - welcome to AssetMapper! üéâ');

// document.addEventListener('DOMContentLoaded', function () {
//     const fileInput = document.getElementById('user_profilePicture');
//     const previewImage = document.getElementById('profilePicturePreview');

//     fileInput.addEventListener('change', function (event) {
//         const file = event.target.files[0];
//         if (file) { 
//             const reader = new FileReader();
//             reader.onload = function (e) {
//                 previewImage.src = e.target.result;
//             };
//             reader.readAsDataURL(file);
//         }
//     });
// });

document.addEventListener('DOMContentLoaded', function () {
    const cookieBanner = document.getElementById('cookie-banner');
    const acceptCookies = document.getElementById('accept-cookies');

    if(!localStorage.getItem('cookiesAccepted')) {
        cookieBanner.style.display = 'flex';// affiche la banni√®re
    }

    acceptCookies.addEventListener('click', function () {
        localStorage.setItem('cookiesAccepted', 'true'); // sauvegarde les cookies dans le localStorage
        cookieBanner.style.display = 'none'; // cache la banni√®re
    });
});


document.addEventListener('DOMContentLoaded', function () {
    // D√©sactive la restauration automatique du scroll (optionnel)
    if ('scrollRestoration' in history) {
        history.scrollRestoration = 'manual';
    }

    // S√©lectionne tous les formulaires de like par leur classe
    const likeForms = document.querySelectorAll('.like-form');

    // Pour chaque formulaire, on intercepte la soumission
    likeForms.forEach(form => {
        form.addEventListener('submit', function (event) {
            // 1. Emp√™che le rechargement de la page
            event.preventDefault();

            // 2. (Optionnel) Enregistre la position du scroll pour la restaurer apr√®s coup
            sessionStorage.setItem('positionClick', window.scrollY);

            // 3. R√©cup√®re l'URL d'action (o√π on envoie la requ√™te AJAX)
            const actionUrl = form.getAttribute('action');

            // 4. Envoie la requ√™te AJAX en POST vers cette URL
            fetch(actionUrl, {
                method: 'POST',
                headers: {
                    // Pas forc√©ment obligatoire, mais indique qu'on fait une requ√™te AJAX
                    'X-Requested-With': 'XMLHttpRequest'
                }
                // Ici, on n'envoie pas de body particulier (pas de JSON suppl√©mentaire),
                // mais tu peux ajouter un "body: JSON.stringify(...)" si besoin
            })
                .then(response => response.json()) // Convertit la r√©ponse en JSON
                .then(data => {
                    // 5. data contient la r√©ponse JSON envoy√©e par le contr√¥leur
                    //    Par exemple : { success: true, action: "liked", likes: 5 }

                    console.log("R√©ponse JSON re√ßue :", data);

                    // 6. Mettre √† jour le compteur de likes
                    //    On suppose que le <span class="like-count"> se trouve
                    //    dans le m√™me conteneur parent que le formulaire
                    const likeCountElement = form.parentElement.querySelector('.like-count');
                    if (likeCountElement && data.likes !== undefined) {
                        // Met √† jour le texte avec la nouvelle valeur
                        likeCountElement.textContent = data.likes;
                    }

                    // 7. Optionnel : animer le bouton
                    const likeButton = form.querySelector('.like-button');
                    if (likeButton) {
                        likeButton.classList.add('animate-like');
                        setTimeout(() => {
                            likeButton.classList.remove('animate-like');
                        }, 500);
                    }
                })
                .catch(error => {
                    // 8. En cas d'erreur AJAX, on l'affiche dans la console
                    console.error("Erreur AJAX :", error);
                });
        });
    });

    // 9. (Optionnel) Restaure la position du scroll si on l'a enregistr√©e pr√©c√©demment
    const savedPos = sessionStorage.getItem('positionClick');
    if (savedPos !== null) {
        window.scrollTo(0, parseInt(savedPos, 10));
        sessionStorage.removeItem('positionClick');
    }
});






document.addEventListener('DOMContentLoaded', function () {
    // S√©lectionne tous les √©l√©ments ayant la classe "selectable-image"
    const selectableImages = document.querySelectorAll('.selectable-image');
    // R√©cup√®re l'√©l√©ment input cach√© qui stockera l'ID de l'image s√©lectionn√©e
    const selectedImageIdInput = document.getElementById('selectedImageId');
    // R√©cup√®re le conteneur qui affichera la pr√©visualisation de l'image
    const previewContainer = document.getElementById('selectedImagePreview');
    // R√©cup√®re l'√©l√©ment <img> qui affichera la pr√©visualisation
    const previewImg = document.getElementById('previewImg');

    // Pour chaque image cliquable, on attache un √©couteur d'√©v√©nement sur le clic
    selectableImages.forEach(img => {
        img.addEventListener('click', function () {
            // Si l'image cliqu√©e est d√©j√† s√©lectionn√©e, on la d√©s√©lectionne
            if (this.classList.contains('selected')) {
                // Retirer la classe "selected" pour indiquer la d√©s√©lection
                this.classList.remove('selected');
                // Vider le champ cach√© (aucune image s√©lectionn√©e)
                selectedImageIdInput.value = '';
                // Vider l'aper√ßu en retirant la source de l'image
                previewImg.src = '';
                // Masquer le conteneur de pr√©visualisation
                previewContainer.style.display = 'none';
            } else {
                // Sinon, d'abord d√©s√©lectionner toutes les images
                selectableImages.forEach(i => i.classList.remove('selected'));
                // Ajouter la classe "selected" √† l'image cliqu√©e pour un feedback visuel
                this.classList.add('selected');

                // R√©cup√©rer l'ID de l'image depuis l'attribut data-id
                const imgId = this.getAttribute('data-id');
                // Mettre √† jour le champ cach√© avec l'ID de l'image s√©lectionn√©e
                selectedImageIdInput.value = imgId;

                // Mettre √† jour l'image de pr√©visualisation avec la source de l'image cliqu√©e
                previewImg.src = this.getAttribute('src');
                // Afficher le conteneur de pr√©visualisation
                previewContainer.style.display = 'block';
            }
        });
    });
});